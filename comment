#!/usr/bin/python
import sys
import subprocess
import shlex
import re
import copy

comment_start  = '/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n'
comment_misc   = ' * '
comment_param  = ' * Param:   '
comment_return = ' * Return:  '
comment_end    = ' * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n'

def main():
	filename = sys.argv[1]
	command = 'ctags -x --c-kinds=f ' + filename
	command_seq = shlex.split(command)

	f = open(filename, 'r')
	lines = f.readlines()
	f.close()

	proc = subprocess.Popen(command_seq, stdout = subprocess.PIPE)
	tags = proc.stdout.readlines()
	sort_tags(tags)
	
	lines_added = 0
	for tag in tags:
		line_num = int(tag[2])-1
		print "\nFunction:\n\t"+ " ".join(tag[4:])
		if input_yn("Comment? (y/n): "):
			lines[(line_num+lines_added):(line_num+lines_added)] = [get_comments(tag)]
			lines_added += 1
		
	if input_yn("View changes? (y/n):"):
		for line in lines:
			print line,

	if input_yn("Commit changes? (y/n):"):
		f = open(filename, 'w')
		f.writelines(lines)
		f.close()


"""
    Prompts the user with a y/n question.
    Returns True if yes, False if no.
"""
def input_yn(prompt):

    inpt = raw_input(prompt).lower()

    if inpt in ("y", "yes"):
        return True

    elif inpt in ("n", "no"):
        return False

    else:
        print "Invalid input.  Please enter yes or no (y/n)."
        return input_yn(prompt)



def sort_tags(tags):
	for x in range(0, len(tags)):
		tags[x] = tags[x].split()

		temp = copy.copy(tags[x])
		hole = x
		while hole > 0 and temp[2] < tags[hole-1][2]:
			tags[hole] = tags[hole-1]
			hole -= 1
		tags[hole] = temp


def get_comments(tag):
	func_name = tag[0]
	func_def = tag[4:]
	return_type = " ".join(func_def).split(func_name)[0].strip()
	params = (re.split('\(|\)', " ".join(func_def))[1:-1])[0].split(",")

	func_descr = comment_misc + raw_input("Description: \n\t") + "\n"
	func_param = ""
	for param in params:
		if param != "":
			param = param.strip()
			func_param += comment_param + param + " -  " + raw_input("Param: \n\t" + param + ": ") + "\n"
	func_return = comment_return + return_type + " -  " + raw_input("Return: \n\t" + return_type + ": ") + "\n"	


	return comment_start + func_descr + func_param + func_return + comment_end

			
if __name__ == "__main__":
	main()





